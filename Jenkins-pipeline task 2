pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'nodejs-app'
        GIT_REPO = 'https://github.com/Shazeboddin99/Node.js-project-t1.git'
        DOCKER_USER = 'shazeboddin'
        DOCKER_TAG = "${GIT_COMMIT}"  // Using Git commit ID for the tag to avoid overwriting
    }

    stages {
        stage('Clone Repository') {
            steps {
                // Clone the Git repository with a specific branch
                git branch: 'main', url: "${env.GIT_REPO}"
            }
        }

        stage('Install Dependencies') {
            steps {
                // Install Node.js dependencies
                sh 'npm install'
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build Docker image from Dockerfile
                sh 'docker build -t $DOCKER_IMAGE:$DOCKER_TAG .'
            }
        }

        stage('Run Docker Container') {
            steps {
                // Stop and remove any existing container with the same name
                sh '''
                    docker stop nodeapp || true
                    docker rm nodeapp || true
                    docker run -d --restart unless-stopped -p 3000:3000 --name nodeapp $DOCKER_IMAGE:$DOCKER_TAG
                '''
            }
        }

        stage('Push to Docker Hub') {
            steps {
                // Use Jenkins credentials to login to Docker Hub
                withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                    sh '''
                        # Login to Docker Hub
                        echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        
                        # Tag and push Docker image to Docker Hub
                        docker tag $DOCKER_IMAGE:$DOCKER_TAG $DOCKERHUB_USER/$DOCKER_IMAGE:$DOCKER_TAG
                        docker push $DOCKERHUB_USER/$DOCKER_IMAGE:$DOCKER_TAG
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
